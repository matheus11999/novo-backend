const { supabase } = require('./src/config/database');

async function fixExistingPayments() {
    console.log('üîß [FIX-PAYMENTS] Iniciando corre√ß√£o de pagamentos existentes...');

    try {
        // 1. Buscar admin user
        const { data: adminUser, error: adminError } = await supabase
            .from('users')
            .select('id, nome, saldo')
            .eq('role', 'admin')
            .limit(1)
            .single();

        if (adminError || !adminUser) {
            console.error('‚ùå Admin user n√£o encontrado:', adminError);
            return;
        }

        console.log(`üëë Admin encontrado: ${adminUser.nome} (Saldo atual: R$ ${adminUser.saldo})`);

        // 2. Buscar vendas completadas sem transa√ß√µes processadas
        const { data: vendasCompletas, error: vendasError } = await supabase
            .from('vendas')
            .select(`
                *,
                planos (*),
                mikrotiks (*, users!mikrotiks_user_id_fkey (id, nome, saldo))
            `)
            .eq('status', 'completed')
            .order('paid_at', { ascending: true });

        if (vendasError) {
            console.error('‚ùå Erro ao buscar vendas:', vendasError);
            return;
        }

        if (!vendasCompletas || vendasCompletas.length === 0) {
            console.log('‚ÑπÔ∏è Nenhuma venda completada encontrada');
            return;
        }

        console.log(`üìä Encontradas ${vendasCompletas.length} vendas completadas para processar`);

        // 3. Verificar quais j√° t√™m transa√ß√µes
        for (const venda of vendasCompletas) {
            console.log(`\nüîç Processando venda: ${venda.payment_id}`);

            // Verificar se j√° existem transa√ß√µes para esta venda
            const { data: transacoesExistentes, error: transError } = await supabase
                .from('transacoes')
                .select('id')
                .eq('referencia_id', venda.id)
                .eq('referencia_tipo', 'venda');

            if (transError) {
                console.error('‚ùå Erro ao verificar transa√ß√µes existentes:', transError);
                continue;
            }

            if (transacoesExistentes && transacoesExistentes.length > 0) {
                console.log(`‚è≠Ô∏è Venda ${venda.payment_id} j√° possui transa√ß√µes, pulando...`);
                continue;
            }

            // 4. Processar a venda
            await processVendaForBalance(venda, adminUser.id);
        }

        console.log('\n‚úÖ [FIX-PAYMENTS] Corre√ß√£o conclu√≠da!');

        // 5. Mostrar relat√≥rio final
        await showFinalReport();

    } catch (error) {
        console.error('‚ùå [FIX-PAYMENTS] Erro na corre√ß√£o:', error);
    }
}

async function processVendaForBalance(venda, adminUserId) {
    try {
        console.log(`üí∞ Processando saldos para venda: ${venda.payment_id}`);
        console.log(`  üìÑ Valor total: R$ ${venda.valor_total}`);
        console.log(`  üëë Valor admin: R$ ${venda.valor_admin}`);
        console.log(`  üë§ Valor usu√°rio: R$ ${venda.valor_usuario}`);

        // 1. Buscar saldo atual do admin
        const { data: adminData, error: adminError } = await supabase
            .from('users')
            .select('saldo')
            .eq('id', adminUserId)
            .single();

        if (adminError) {
            console.error('‚ùå Erro ao buscar saldo do admin:', adminError);
            return;
        }

        const adminSaldoAnterior = parseFloat(adminData.saldo) || 0;
        const adminSaldoNovo = adminSaldoAnterior + parseFloat(venda.valor_admin);

        // 2. Buscar saldo atual do usu√°rio do MikroTik
        const mikrotikUser = venda.mikrotiks?.users;
        const mikrotikUserId = mikrotikUser?.id || adminUserId;
        
        console.log(`  üè¢ MikroTik: ${venda.mikrotiks?.nome}`);
        console.log(`  üë§ Usu√°rio: ${mikrotikUser?.nome || 'Admin'}`);

        let userSaldoAnterior = 0;
        let userSaldoNovo = 0;

        if (mikrotikUserId !== adminUserId) {
            const { data: userData, error: userError } = await supabase
                .from('users')
                .select('saldo')
                .eq('id', mikrotikUserId)
                .single();

            if (userError) {
                console.error('‚ùå Erro ao buscar saldo do usu√°rio:', userError);
                return;
            }

            userSaldoAnterior = parseFloat(userData.saldo) || 0;
            userSaldoNovo = userSaldoAnterior + parseFloat(venda.valor_usuario);
        }

        // 3. Criar as transa√ß√µes
        const transacoes = [
            {
                user_id: adminUserId,
                tipo: 'credito',
                motivo: `Comiss√£o admin - Venda ${venda.payment_id}`,
                valor: parseFloat(venda.valor_admin),
                referencia_id: venda.id,
                referencia_tipo: 'venda',
                saldo_anterior: adminSaldoAnterior,
                saldo_atual: adminSaldoNovo
            }
        ];

        // Adicionar transa√ß√£o do usu√°rio apenas se for diferente do admin
        if (mikrotikUserId !== adminUserId) {
            transacoes.push({
                user_id: mikrotikUserId,
                tipo: 'credito',
                motivo: `Receita de venda - Venda ${venda.payment_id}`,
                valor: parseFloat(venda.valor_usuario),
                referencia_id: venda.id,
                referencia_tipo: 'venda',
                saldo_anterior: userSaldoAnterior,
                saldo_atual: userSaldoNovo
            });
        } else {
            // Se o usu√°rio √© o mesmo que admin, somar tudo no admin
            transacoes[0].valor = parseFloat(venda.valor_admin) + parseFloat(venda.valor_usuario);
            transacoes[0].saldo_atual = adminSaldoAnterior + parseFloat(venda.valor_admin) + parseFloat(venda.valor_usuario);
            transacoes[0].motivo = `Comiss√£o total - Venda ${venda.payment_id}`;
        }

        const { error: transacaoError } = await supabase
            .from('transacoes')
            .insert(transacoes);

        if (transacaoError) {
            console.error('‚ùå Erro ao criar transa√ß√µes:', transacaoError);
            return;
        }

        // 4. Atualizar saldos dos usu√°rios
        const { error: adminUpdateError } = await supabase
            .from('users')
            .update({ saldo: mikrotikUserId === adminUserId ? transacoes[0].saldo_atual : adminSaldoNovo })
            .eq('id', adminUserId);

        if (adminUpdateError) {
            console.error('‚ùå Erro ao atualizar saldo do admin:', adminUpdateError);
            return;
        }

        // Se o usu√°rio do MikroTik for diferente do admin
        if (mikrotikUserId !== adminUserId) {
            const { error: userUpdateError } = await supabase
                .from('users')
                .update({ saldo: userSaldoNovo })
                .eq('id', mikrotikUserId);

            if (userUpdateError) {
                console.error('‚ùå Erro ao atualizar saldo do usu√°rio:', userUpdateError);
                return;
            }
        }

        console.log(`‚úÖ Venda processada com sucesso!`);
        if (mikrotikUserId === adminUserId) {
            console.log(`  üìä Admin: R$ ${adminSaldoAnterior.toFixed(2)} ‚Üí R$ ${transacoes[0].saldo_atual.toFixed(2)} (+R$ ${transacoes[0].valor.toFixed(2)})`);
        } else {
            console.log(`  üìä Admin: R$ ${adminSaldoAnterior.toFixed(2)} ‚Üí R$ ${adminSaldoNovo.toFixed(2)} (+R$ ${venda.valor_admin})`);
            console.log(`  üìä User: R$ ${userSaldoAnterior.toFixed(2)} ‚Üí R$ ${userSaldoNovo.toFixed(2)} (+R$ ${venda.valor_usuario})`);
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar venda:', error);
    }
}

async function showFinalReport() {
    try {
        console.log('\nüìä [RELAT√ìRIO FINAL]');
        console.log('================================');

        // Total de transa√ß√µes
        const { data: totalTransacoes, error: transError } = await supabase
            .from('transacoes')
            .select('id', { count: 'exact' });

        if (!transError) {
            console.log(`üí≥ Total de transa√ß√µes: ${totalTransacoes.length}`);
        }

        // Saldos atualizados
        const { data: usuarios, error: userError } = await supabase
            .from('users')
            .select('nome, role, saldo')
            .gt('saldo', 0)
            .order('saldo', { ascending: false });

        if (!userError && usuarios) {
            console.log('\nüë• Usu√°rios com saldo:');
            usuarios.forEach(user => {
                console.log(`  ${user.role === 'admin' ? 'üëë' : 'üë§'} ${user.nome}: R$ ${parseFloat(user.saldo).toFixed(2)}`);
            });
        }

        // Total de vendas
        const { data: vendas, error: vendaError } = await supabase
            .from('vendas')
            .select('status', { count: 'exact' })
            .eq('status', 'completed');

        if (!vendaError) {
            console.log(`\nüõí Vendas completadas: ${vendas.length}`);
        }

    } catch (error) {
        console.error('‚ùå Erro ao gerar relat√≥rio:', error);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    fixExistingPayments()
        .then(() => {
            console.log('üéâ Script executado com sucesso!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå Erro na execu√ß√£o:', error);
            process.exit(1);
        });
}

module.exports = { fixExistingPayments }; 